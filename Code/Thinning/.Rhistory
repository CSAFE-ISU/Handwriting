X.bc = data.frame(V1 = BC(X[,1], lambda = lambdaChoice[1]), V2 = BC(X[,2], lambda = lambdaChoice[2]))
ggplot(df) + geom_tile(aes(x = x, y = y, fill = WSS)) + scale_fill_continuous(low = "white", high = "darkblue") + geom_point(x = lambdaChoice[1], y = lambdaChoice[2], shape = "X") + xlab(expression(lambda[1])) + ylab(expression(lambda[2])) + theme_bw()
ggplot(data = X) + stat_density2d(aes(x = V1, y = V2)) + coord_fixed() + theme_bw() + ggtitle(paste0("Set ", setNumber, " Base"))
BC = function(y, lambda = 0)
{
if(!all(y > 0))
{
y = y - y[which.min(y)] + .01
}
return((y^lambda - 1)/lambda)
}
n = 1000
p = 2
seqVect = seq(.1, 2, .1)
df = data.frame(x = rep(seqVect, each = length(seqVect)), y = rep(seqVect, length(seqVect)))
fun = function(xy, dat)
{
X.bc = cbind(BC(dat[,1], lambda = xy[1]), BC(dat[,2], lambda = xy[2]))
km = kmeans(X.bc, 2, nstart = 1000)
return((n*p/2)*log(km$tot.withinss) - logjac(xy, dat))
}
logjac = function(lambda, dat)
{
for(i in 1:dim(dat)[2])
{
if(!all(dat[,i] > 0))
{
dat[,i] = dat[,i] - dat[,i][which.min(dat[,i])] + .01
}
}
jac1 = dat[,1]^lambda[1]
jac2 = dat[,2]^lambda[2]
return(sum(log(jac1) + log(jac2)))
}
df$WSS = apply(df, 1, fun, dat = X)
setNumber = 1
lambdaChoice = c(df$x[which.min(df$WSS)], df$y[which.min(df$WSS)])
X.bc = data.frame(V1 = BC(X[,1], lambda = lambdaChoice[1]), V2 = BC(X[,2], lambda = lambdaChoice[2]))
ggplot(df) + geom_tile(aes(x = x, y = y, fill = WSS)) + scale_fill_continuous(low = "white", high = "darkblue") + geom_point(x = lambdaChoice[1], y = lambdaChoice[2], shape = "X") + xlab(expression(lambda[1])) + ylab(expression(lambda[2])) + theme_bw()
ggplot(data = X) + stat_density2d(aes(x = V1, y = V2)) + coord_fixed() + theme_bw() + ggtitle(paste0("Set ", setNumber, " Base"))
ggplot(data = X.bc) + stat_density2d(aes(x = V1, y = V2)) + coord_fixed() + theme_bw() + ggtitle(paste0("Set ", setNumber, " Normalized"))
BC = function(y, lambda = 0)
{
return(log(lambda*y + sqrt(lambda^2*y^2 + 1)) / lambda)
}
n = 1000
p = 2
seqVect = seq(.2, 3, .2)
df = data.frame(x = rep(seqVect, each = length(seqVect)), y = rep(seqVect, length(seqVect)))
fun = function(xy, dat)
{
X.ihs = cbind(IHS(dat[,1], lambda = xy[1]), IHS(dat[,2], lambda = xy[2]))
km = kmeans(X.ihs, 2, nstart = 1000)
return((n*p/2)*log(km$tot.withinss) - logjac(xy, dat))
}
logjac = function(lambda, dat)
{
jac1 =  1/sqrt(lambda[1]^2*dat[,1]^2 + 1)
jac2 =  1/sqrt(lambda[2]^2*dat[,2]^2 + 1)
return(sum(log(jac1) + log(jac2)))
}
df$WSS = apply(df, 1, fun, dat = X)
IHS = function(y, lambda = 0)
{
return(log(lambda*y + sqrt(lambda^2*y^2 + 1)) / lambda)
}
n = 1000
p = 2
seqVect = seq(.2, 3, .2)
df = data.frame(x = rep(seqVect, each = length(seqVect)), y = rep(seqVect, length(seqVect)))
fun = function(xy, dat)
{
X.ihs = cbind(IHS(dat[,1], lambda = xy[1]), IHS(dat[,2], lambda = xy[2]))
km = kmeans(X.ihs, 2, nstart = 1000)
return((n*p/2)*log(km$tot.withinss) - logjac(xy, dat))
}
logjac = function(lambda, dat)
{
jac1 =  1/sqrt(lambda[1]^2*dat[,1]^2 + 1)
jac2 =  1/sqrt(lambda[2]^2*dat[,2]^2 + 1)
return(sum(log(jac1) + log(jac2)))
}
df$WSS = apply(df, 1, fun, dat = X)
lambdaChoice = c(df$x[which.min(df$WSS)], df$y[which.min(df$WSS)])
X.ihs = data.frame(V1 = IHS(X[,1], lambda = lambdaChoice[1]), V2 = IHS(X[,2], lambda = lambdaChoice[2]))
ggplot(df) + geom_tile(aes(x = x, y = y, fill = WSS)) + scale_fill_continuous(low = "white", high = "darkblue") + geom_point(x = lambdaChoice[1], y = lambdaChoice[2], shape = "X") + xlab(expression(lambda[1])) + ylab(expression(lambda[2])) + theme_bw()
ggplot(data = X) + stat_density2d(aes(x = V1, y = V2)) + coord_fixed() + theme_bw() + ggtitle(paste0("Set ", setNumber, " Base"))
ggplot(data = X.ihs) + stat_density2d(aes(x = V1, y = V2)) + coord_fixed() + theme_bw() + ggtitle(paste0("Set ", setNumber, " Normalized"))
plot(X, col = kmeans(X.ihs, 2)$cluster)
data("iris")
iris = as.matrix(iris[,1:4])
X = iris
K = 3
centers = NULL
ninit = 1
lambdaSeq = NULL
bestWSS = Inf
if(is.null(lambdaSeq))
{
lambdaSeq = seq(from = .01, to = 3, by = .25)
}
lambdaSeq
lambda = array(0, dim = rep(length(lambdaSeq), dim(X)[2]))
lambda
melt(lambda)
london
plotImage(london)
plotImage(letter)
data(letter)
letter = readPNGBinary("../../Data/by_field/hsf_0/lower/69/69_00002.png")
plot(mage(letter))
plotImage(letter))
plotImage(letter)
letter = readPNGBinary("../../Data/by_field/hsf_0/lower/69/69_00003.png")
plotImage(letter)
letter = readPNGBinary("../../Data/by_field/hsf_0/lower/71/71_00003.png")
plotImage(letter)
letter = readPNGBinary("../../Data/by_field/hsf_0/lower/72/72_00003.png")
plotImage(letter)
letter = readPNGBinary("../../Data/by_field/hsf_0/lower/73/73_00003.png")
plotImage(letter)
letter = readPNGBinary("../../Data/by_field/hsf_0/lower/74/74_00003.png")
plotImage(letter)
letter = readPNGBinary("../../Data/by_field/hsf_0/lower/74/74_00004.png")
plotImage(letter)
letter = readPNGBinary("../../Data/by_field/hsf_0/lower/74/74_00005.png")
plotImage(letter)
letter = readPNGBinary("../../Data/by_field/hsf_0/lower/74/74_00006.png")
plotImage(letter)
countChanges = function(coords, img)
{
rr = coords[1]
cc = coords[2]
if(rr>1 & cc>1 & rr<dim(img)[1] & cc<dim(img)[2])
{
neighbs = c(t(img[(rr-1):(rr+1),][,(cc-1):(cc+1)]))[c(2,3,6,9,8,7,4,1,2)]
return(sum(neighbs == 1 & c(neighbs[-1], neighbs[1]) == 0))
}
else
return(0)
}
getNodes = function(img)
{
indices = which(img == 0)
img.m = cbind(((indices-1) %% dim(img)[1]) + 1, ((indices - 1) %/% dim(img)[1]) + 1)
offEdge = between(img.m[,1], 2, dim(img)[1] - 1) & between(img.m[,2], 2, dim(img)[2] - 1)
img.m = img.m[offEdge,]
indices = indices[between(img.m[,1], 2, dim(img)[1] - 1) & between(img.m[,2], 2 dim(img)[2] - 1)]
#postRemovalCount = matrix(apply(X = img.m, MARGIN = 1, FUN = postRemovalCount, img = img), byrow = F, nrow = 1)
changeCount = matrix(apply(X = img.m, MARGIN = 1, FUN = countChanges, img = img), byrow = F, nrow = 1)
nodes = matrix(1, dim(img)[1], dim(img)[2])
nodes[indices[offEdge]] = ifelse(postRemovalCount == 1 | postRemovalCount >= 3, 0, 1)
return(nodes)
}
getNodes = function(img)
{
indices = which(img == 0)
img.m = cbind(((indices-1) %% dim(img)[1]) + 1, ((indices - 1) %/% dim(img)[1]) + 1)
offEdge = between(img.m[,1], 2, dim(img)[1] - 1) & between(img.m[,2], 2, dim(img)[2] - 1)
img.m = img.m[offEdge,]
indices = indices[between(img.m[,1], 2, dim(img)[1] - 1) & between(img.m[,2], 2 dim(img)[2] - 1)]
#postRemovalCount = matrix(apply(X = img.m, MARGIN = 1, FUN = postRemovalCount, img = img), byrow = F, nrow = 1)
changeCount = matrix(apply(X = img.m, MARGIN = 1, FUN = countChanges, img = img), byrow = F, nrow = 1)
nodes = matrix(1, dim(img)[1], dim(img)[2])
nodes[indices[offEdge]] = ifelse(postRemovalCount == 1 | postRemovalCount >= 3, 0, 1)
return(nodes)
}
getNodes = function(img)
{
indices = which(img == 0)
img.m = cbind(((indices-1) %% dim(img)[1]) + 1, ((indices - 1) %/% dim(img)[1]) + 1)
offEdge = between(img.m[,1], 2, dim(img)[1] - 1) & between(img.m[,2], 2, dim(img)[2] - 1)
img.m = img.m[offEdge,]
indices = indices[between(img.m[,1], 2, dim(img)[1] - 1) & between(img.m[,2], 2 dim(img)[2] - 1)]
#postRemovalCount = matrix(apply(X = img.m, MARGIN = 1, FUN = postRemovalCount, img = img), byrow = F, nrow = 1)
changeCount = matrix(apply(X = img.m, MARGIN = 1, FUN = countChanges, img = img), byrow = F, nrow = 1)
nodes = matrix(1, dim(img)[1], dim(img)[2])
nodes[indices[offEdge]] = ifelse(postRemovalCount == 1 | postRemovalCount >= 3, 0, 1)
return(nodes)
}
indices = which(img == 0)
img = letter
indices = which(img == 0)
img.m = cbind(((indices-1) %% dim(img)[1]) + 1, ((indices - 1) %/% dim(img)[1]) + 1)
offEdge = between(img.m[,1], 2, dim(img)[1] - 1) & between(img.m[,2], 2, dim(img)[2] - 1)
library(dplyr)
offEdge = between(img.m[,1], 2, dim(img)[1] - 1) & between(img.m[,2], 2, dim(img)[2] - 1)
img.m = img.m[offEdge,]
indices = indices[between(img.m[,1], 2, dim(img)[1] - 1) & between(img.m[,2], 2 dim(img)[2] - 1)]
indices[between(img.m[,1], 2, dim(img)[1] - 1) & between(img.m[,2], 2 dim(img)[2] - 1)]
between(img.m[,1], 2, dim(img)[1] - 1) & between(img.m[,2], 2 dim(img)[2] - 1)
between(img.m[,1], 2, dim(img)[1] - 1)
between(img.m[,2], 2 dim(img)[2] - 1)
indices = indices[between(img.m[,1], 2, dim(img)[1] - 1) & between(img.m[,2], 2, dim(img)[2] - 1)]
changeCount = matrix(apply(X = img.m, MARGIN = 1, FUN = countChanges, img = img), byrow = F, nrow = 1)
nodes = matrix(1, dim(img)[1], dim(img)[2])
nodes[indices[offEdge]] = ifelse(postRemovalCount == 1 | postRemovalCount >= 3, 0, 1)
nodes[indices[offEdge]] = ifelse(changeCount == 1 | changeCount >= 3, 0, 1)
plotNodes = function(thinned, nodeList)
{
t.m = melt(thinned)
n.m = melt(nodeList)
t.m$value[n.m$value == 0] = 2
p = ggplot(t.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value))) + scale_fill_manual(values = c("black", "white", "red"), guide = FALSE) + theme_void()
return(p)
}
letter_thin = thinImage(letter)
plotImageThinned(letter, letter_thin)
plotNode(letter_thin, nodes)
plotNodes(letter_thin, nodes)
getNodes(letter_thin)
getNodes = function(img)
{
indices = which(img == 0)
img.m = cbind(((indices-1) %% dim(img)[1]) + 1, ((indices - 1) %/% dim(img)[1]) + 1)
offEdge = between(img.m[,1], 2, dim(img)[1] - 1) & between(img.m[,2], 2, dim(img)[2] - 1)
img.m = img.m[offEdge,]
indices = indices[between(img.m[,1], 2, dim(img)[1] - 1) & between(img.m[,2], 2, dim(img)[2] - 1)]
#postRemovalCount = matrix(apply(X = img.m, MARGIN = 1, FUN = postRemovalCount, img = img), byrow = F, nrow = 1)
changeCount = matrix(apply(X = img.m, MARGIN = 1, FUN = countChanges, img = img), byrow = F, nrow = 1)
nodes = matrix(1, dim(img)[1], dim(img)[2])
nodes[indices[offEdge]] = ifelse(changeCount == 1 | changeCount >= 3, 0, 1)
return(nodes)
}
getNodes(letter_thin)
letter_nodes = getNodes(letter_thin)
plotNodes(letter_thin, letter_nodes)
letter = crop(letter)
letter_thin = thinImage(letter)
letter_nodes = getNodes(letter_thin)
plotImage(letter)
plotImageThinned(letter, letter_thin)
plotNodes(letter_thin, letter_nodes)
plotImage(london)
london_thin = thinImage(london)
plotImageThinned(london, london_thin)
london_nodes = getNodes(london_thin)
plotNodes(london_thin, london_nodes)
getNodes = function(img)
{
indices = which(img == 0)
img.m = cbind(((indices-1) %% dim(img)[1]) + 1, ((indices - 1) %/% dim(img)[1]) + 1)
changeCount = matrix(apply(X = img.m, MARGIN = 1, FUN = countChanges, img = img), byrow = F, nrow = 1)
nodes = matrix(1, dim(img)[1], dim(img)[2])
nodes[indices] = ifelse(changeCount == 1 | changeCount >= 3, 0, 1)
return(nodes)
}
plotNodes(letter_thin, letter_nodes)
plotImageThinned(letter, letter_thin)
plotImageThinned(message, message_thin)
plotImageThinned(message, message_fast)
getNodes(message_fast)
message_nodes = getNodes(message_fast)
plotNodes(message_fast, message_nodes)
plotNodes(crop(message_fast), crop(message_nodes))
plotNodes(message_fast, message_nodes)
plotImageThinned(message, message_fast)
plotImageThinned(message, message_fast)
plotNodes(message_fast, message_nodes)
plotNodes(letter_thin, letter_nodes)
plotNodes(london_fast, london_nodes)
image(london_thin)
london_thin
getNodes(london_thin)
thinned = london_thin
nodeList = getNodes(london_thin)
t.m = melt(thinned)
n.m = melt(nodeList)
t.m$value[n.m$value == 0] = 2
n.m2 = n.m[n.m$value == 2,]
p = ggplot(t.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value))) + scale_fill_manual(values = c("black", "white", "red"), guide = FALSE) + theme_void()
install.packages("geomnet")
library(geomnet)
n.m2
n.m2 = n.m$value[n.m$value == 2,]
n.m2 = n.m$value[n.m$value == 2]
n.m2
n.m2 = n.m[n.m$value == 2,]
n.m2
n.m
n.m2 = n.m[n.m$value == 0,]
n.m2
p = p + geom_point(data= n.m2, aes(x = Var1, y = Var2), shape = I(24))
p
p = p + geom_point(data= n.m2, aes(x = Var2, y = Var1), shape = I(24))
p
p = ggplot(t.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value))) + scale_fill_manual(values = c("black", "white", "red"), guide = FALSE) + theme_void()
p
p = p + geom_point(data= n.m2, aes(x = Var2, y = Var1), shape = I(24))
p
p = p + geom_point(data= n.m2, aes(x = Var2, y = rev(Var1)), shape = I(24))
p = ggplot(t.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value))) + scale_fill_manual(values = c("black", "white", "red"), guide = FALSE) + theme_void()
p = p + geom_point(data= n.m2, aes(x = Var2, y = rev(Var1)), shape = I(24))
p
n.m2
ggplot(t.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value))) + scale_fill_manual(values = c("black", "white", "red"), guide = FALSE) + theme_void() + geom_point(data= n.m2, aes(x = Var2, y = Var1), shape = I(24))
ggplot(t.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value))) + scale_fill_manual(values = c("black", "white", "red"), guide = FALSE) + theme_void() + geom_point(data= n.m2, aes(x = Var2, y = rev(Var1)), shape = I(24))
ggplot(t.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value))) + scale_fill_manual(values = c("black", "white", "red"), guide = FALSE) + theme_void() + geom_point(data= n.m2, aes(x = Var2, y = rev(Var1)), shape = I(24), color = I("red"))
ggplot(t.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value))) + scale_fill_manual(values = c("black", "white", "red"), guide = FALSE) + theme_void() + geom_point(data= n.m2, aes(x = Var2, y = dim(n.m2)[1] - Var1)), shape = I(24), color = I("red"))
ggplot(t.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value))) + scale_fill_manual(values = c("black", "white", "red"), guide = FALSE) + theme_void() + geom_point(data= n.m2, aes(x = Var2, y = dim(n.m2)[1] - Var1)), shape = I(24), color = I("red"))
ggplot(t.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value))) + scale_fill_manual(values = c("black", "white", "red"), guide = FALSE) + theme_void() + geom_point(data= n.m2, aes(x = Var2, y = dim(n.m2)[1] - Var1), shape = I(24), color = I("red"))
n.m2
ggplot(t.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value))) + scale_fill_manual(values = c("black", "white", "red"), guide = FALSE) + theme_void() + geom_point(data= n.m2, aes(x = Var2, y = dim(thinned)[1] - Var1), shape = I(24), color = I("red"))
ggplot(t.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value))) + scale_fill_manual(values = c("black", "white", "red"), guide = FALSE) + theme_void() + geom_point(data= n.m2, aes(x = Var2, y = dim(thinned)[1] - Var1 - 1), shape = I(24), color = I("red"))
ggplot(t.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value))) + scale_fill_manual(values = c("black", "white", "red"), guide = FALSE) + theme_void() + geom_point(data= n.m2, aes(x = Var2, y = dim(thinned)[1] - Var1 + 1), shape = I(24), color = I("red"))
thinned = message_thin
thinned = message_fast
nodeList = getNodes(thinned)
t.m = melt(thinned)
n.m = melt(nodeList)
t.m$value[n.m$value == 0] = 2
n.m2 = n.m[n.m$value == 0,]
ggplot(t.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value))) + scale_fill_manual(values = c("black", "white", "red"), guide = FALSE) + theme_void() + geom_point(data= n.m2, aes(x = Var2, y = dim(thinned)[1] - Var1 + 1), shape = I(24), color = I("red"))
plotImageThinned(london, london_thin)
plotNodes = function(thinned, nodeList)
{
t.m = melt(thinned)
n.m = melt(nodeList)
t.m$value[n.m$value == 0] = 2
n.m2 = n.m[n.m$value == 0,]
p = ggplot(t.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value))) + scale_fill_manual(values = c("black", "white", "red"), guide = FALSE) + theme_void() + geom_point(data= n.m2, aes(x = Var2, y = dim(thinned)[1] - Var1 + 1), shape = I(24), color = I("red"))
return(p)
}
plotNodes(message_fast, message_nodes)
plotImageThinned(london, london_thin)
install.packages("rmdshower")
plotNodes = function(thinned, nodeList)
{
t.m = melt(thinned)
n.m = melt(nodeList)
t.m$value[n.m$value == 0] = 2
n.m2 = n.m[n.m$value == 0,]
p = ggplot(t.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value))) + scale_fill_manual(values = c("black", "white", "red"), guide = FALSE) + theme_void() + geom_point(data= n.m2, aes(x = Var2, y = dim(thinned)[1] - Var1 + 1), shape = I(24), color = I("red"))
return(p)
}
plotNodes(london_thin, london_nodes)
plotPreprocess = function(img, thinned, nodeList)
{
l.m = melt(img)
t.m = melt(thinned)
n.m = melt(nodeList)
l.m$value[t.m$value == 0] = 2
l.m$value[n.m$value == 0] = 3
n.m2 = n.m[n.m$value == 0,]
p = ggplot(l.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value != 1), alpha = ifelse(value==0,.3,1))) + scale_alpha_continuous(guide = FALSE) + scale_fill_manual(values = c("white", "black"), guide = FALSE) + theme_void() + geom_point(data= n.m2, aes(x = Var2, y = dim(thinned)[1] - Var1 + 1), shape = I(24), color = I("red"))
return(p)
}
plotPreprocess(london, london_thin, london_nodes)
p = ggplot(l.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value != 1), alpha = ifelse(value==0,.3,1))) + scale_alpha_continuous(guide = FALSE) + scale_fill_manual(values = c("white", "black"), guide = FALSE) + theme_void() + geom_point(data= n.m2, aes(x = Var2, y = dim(thinned)[1] - Var1 + 1), shape = I(24), size = I(2), color = I("red"))
plotPreprocess = function(img, thinned, nodeList)
{
l.m = melt(img)
t.m = melt(thinned)
n.m = melt(nodeList)
l.m$value[t.m$value == 0] = 2
l.m$value[n.m$value == 0] = 3
n.m2 = n.m[n.m$value == 0,]
p = ggplot(l.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value != 1), alpha = ifelse(value==0,.3,1))) + scale_alpha_continuous(guide = FALSE) + scale_fill_manual(values = c("white", "black"), guide = FALSE) + theme_void() + geom_point(data= n.m2, aes(x = Var2, y = dim(thinned)[1] - Var1 + 1), shape = I(24), size = I(2), color = I("red"))
return(p)
}
plotPreprocess(london, london_thin, london_nodes)
plotPreprocess = function(img, thinned, nodeList)
{
l.m = melt(img)
t.m = melt(thinned)
n.m = melt(nodeList)
l.m$value[t.m$value == 0] = 2
l.m$value[n.m$value == 0] = 3
n.m2 = n.m[n.m$value == 0,]
p = ggplot(l.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value != 1), alpha = ifelse(value==0,.3,1))) + scale_alpha_continuous(guide = FALSE) + scale_fill_manual(values = c("white", "black"), guide = FALSE) + theme_void() + geom_point(data= n.m2, aes(x = Var2, y = dim(thinned)[1] - Var1 + 1), shape = I(24), size = I('b'), color = I("red"))
return(p)
}
plotPreprocess(london, london_thin, london_nodes)
plotPreprocess = function(img, thinned, nodeList)
{
l.m = melt(img)
t.m = melt(thinned)
n.m = melt(nodeList)
l.m$value[t.m$value == 0] = 2
l.m$value[n.m$value == 0] = 3
n.m2 = n.m[n.m$value == 0,]
p = ggplot(l.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value != 1), alpha = ifelse(value==0,.3,1))) + scale_alpha_continuous(guide = FALSE) + scale_fill_manual(values = c("white", "black"), guide = FALSE) + theme_void() + geom_point(data= n.m2, aes(x = Var2, y = dim(thinned)[1] - Var1 + 1), shape = I(24), size = I(17), color = I("red"))
return(p)
}
plotPreprocess(london, london_thin, london_nodes)
plotPreprocess = function(img, thinned, nodeList)
{
l.m = melt(img)
t.m = melt(thinned)
n.m = melt(nodeList)
l.m$value[t.m$value == 0] = 2
l.m$value[n.m$value == 0] = 3
n.m2 = n.m[n.m$value == 0,]
p = ggplot(l.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value != 1), alpha = ifelse(value==0,.3,1))) + scale_alpha_continuous(guide = FALSE) + scale_fill_manual(values = c("white", "black"), guide = FALSE) + theme_void() + geom_point(data= n.m2, aes(x = Var2, y = dim(thinned)[1] - Var1 + 1), shape = I(17), size = I(2), color = I("red"))
return(p)
}
plotPreprocess(london, london_thin, london_nodes)
plotPreprocess = function(img, thinned, nodeList)
{
l.m = melt(img)
t.m = melt(thinned)
n.m = melt(nodeList)
l.m$value[t.m$value == 0] = 2
l.m$value[n.m$value == 0] = 3
n.m2 = n.m[n.m$value == 0,]
p = ggplot(l.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value != 1), alpha = ifelse(value==0,.3,1))) + scale_alpha_continuous(guide = FALSE) + scale_fill_manual(values = c("white", "black"), guide = FALSE) + theme_void() + geom_point(data= n.m2, aes(x = Var2, y = dim(thinned)[1] - Var1 + 1), shape = I(17), size = I(3), color = I("red"))
return(p)
}
plotPreprocess(london, london_thin, london_nodes)
plotPreprocess(message, message_fast, message_nodes)
plotPreprocess = function(img, thinned, nodeList, nodeSize = 3)
{
l.m = melt(img)
t.m = melt(thinned)
n.m = melt(nodeList)
l.m$value[t.m$value == 0] = 2
l.m$value[n.m$value == 0] = 3
n.m2 = n.m[n.m$value == 0,]
p = ggplot(l.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value != 1), alpha = ifelse(value==0,.3,1))) + scale_alpha_continuous(guide = FALSE) + scale_fill_manual(values = c("white", "black"), guide = FALSE) + theme_void() + geom_point(data= n.m2, aes(x = Var2, y = dim(thinned)[1] - Var1 + 1), shape = I(17), size = I(nodeSize), color = I("red"))
return(p)
}
plotPreprocess(message, message_fast, message_nodes, 2)
plotPreprocess(message, message_fast, message_nodes, 1)
devtools::install_github("berryni/handwriter")
devtools::install_github("berryni/handwriter")
library(handwriter)
devtools::install_github("CSAFE-ISU/handwriter")
library(handwriter)
data(london)
london_thin = thinImage(london)
london_thin = thinImage(london)
london_nodes = getNodes(london_thin)
plotThinnedImage(london, london_thin)
plotImageThinned(london, london_thin)
plotPreprocess(london, london_thin, london_nodes)
rm(list = ls())
devtools::install_github("CSAFE-ISU/handwriter")
library(handwriter)
data(london)
london_thin = thinImage(london)
london_nodes = getNodes(london_thin)
devtools::install_github("CSAFE-ISU/handwriter")
library(handwriter)
?handwriter
?getNodes
?thinImage
remove.packages("handwriter")
devtools::install_github("CSAFE-ISU/handwriter")
library(handwriter)
?getNodes
?thinImage
devtools::install_github("CSAFE-ISU/handwriter")
library(handwriter)
?getNodes
?thinImage
data(london)
london = crop(london)
london_thin = thinImage(london, verbose = TRUE)
getNodes = function(img)
{
indices = which(img == 0)
img.m = cbind(((indices-1) %% dim(img)[1]) + 1, ((indices - 1) %/% dim(img)[1]) + 1)
changeCount = matrix(apply(X = img.m, MARGIN = 1, FUN = countChanges, img = img), byrow = F, nrow = 1)
nodes = matrix(1, dim(img)[1], dim(img)[2])
nodes[indices] = ifelse(changeCount == 1 | changeCount >= 3, 0, 1)
return(nodes)
}
plotNodes = function(img, thinned, nodeList, nodeSize = 3)
{
l.m = melt(img)
t.m = melt(thinned)
n.m = melt(nodeList)
l.m$value[t.m$value == 0] = 2
l.m$value[n.m$value == 0] = 3
n.m2 = n.m[n.m$value == 0,]
p = ggplot(l.m, aes(Var2, rev(Var1))) + geom_raster(aes(fill = as.factor(value != 1), alpha = ifelse(value==0,.3,1))) + scale_alpha_continuous(guide = FALSE) + scale_fill_manual(values = c("white", "black"), guide = FALSE) + theme_void() + geom_point(data= n.m2, aes(x = Var2, y = dim(thinned)[1] - Var1 + 1), shape = I(17), size = I(nodeSize), color = I("red"))
return(p)
}
getNodes(london_thin)
countChanges = function(coords, img)
{
rr = coords[1]
cc = coords[2]
if(rr>1 & cc>1 & rr<dim(img)[1] & cc<dim(img)[2])
{
neighbs = c(t(img[(rr-1):(rr+1),][,(cc-1):(cc+1)]))[c(2,3,6,9,8,7,4,1,2)]
return(sum(neighbs == 1 & c(neighbs[-1], neighbs[1]) == 0))
}
else
{
stop("Please use `crop` to crop your image. Not padded around outside.")
}
}
getNodes(london_thin)
london_nodes = getNodes(img = london_thin)
plotNodes(london, london_thin, london_nodes)
devtools::install_github("CSAFE_ISU/handwriter")
devtools::install_github("CSAFE-ISU/handwriter")
library(handwriter)
?getNodes
?thinImage
devtools::document()
getwd()
setwd("../../handwriter/")
devtools::document()
install.packages("CSAFE-ISU/handwriter")
devtools::install_github("CSAFE-ISU/handwriter")
library(github)
library(handwriter)
?getNodes
library(handwriter)
?getNodes
