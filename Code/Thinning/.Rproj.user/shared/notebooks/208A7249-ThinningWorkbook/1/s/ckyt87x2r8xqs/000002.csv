"0","neighborChanges = function(coords, img)"
"0","{"
"0","  rr = coords[1]"
"0","  cc = coords[2]"
"0","  if(rr>1 & cc>1 & rr<dim(img)[1] & cc<dim(img)[2])"
"0","  {"
"0","    neighbs = c(t(img[(rr-1):(rr+1),][,(cc-1):(cc+1)]))[c(2,3,6,9,8,7,4,1,2)]"
"0","    return(sum(neighbs == 1 & c(neighbs[-1], neighbs[1]) == 0))"
"0","  }"
"0","  else"
"0","    return(0)"
"0","}"
"0","#' numNeighbors"
"0","#'"
"0","#' Internal function for thinImage. Counts neighbors with value of 0."
"0","#' @param coords Point location."
"0","#' @param img Image object."
"0","#' @return Returns number of 0 neighbors."
"0","numNeighbors = function(coords, img)"
"0","{"
"0","  rr = coords[1]"
"0","  cc = coords[2]"
"0","  if(rr>1 & cc>1 & rr<dim(img)[1] & cc<dim(img)[2])"
"0","  {"
"0","    neighbs = c(t(img[(rr-1):(rr+1),][,(cc-1):(cc+1)]))[c(2,3,6,9,8,7,4,1)]"
"0","    return(sum(neighbs == 0))"
"0","  }"
"0","  else"
"0","    return(0)"
"0","}"
"0","#' neighbs246468"
"0","#'"
"0","#' Internal function for thinImage. Returns 1 if one of the points to the top, bottom and left AND one of right, bottom, left are non-zero. 0 otherwise."
"0","#' @param coords Point location."
"0","#' @param img Image object."
"0","#' @return Returns 1 or 0 for condition mentioned above."
"0","#' "
"0","neighbs246468 = function(coords, img)"
"0","{"
"0","  rr = coords[1]"
"0","  cc = coords[2]"
"0","  if(rr>1 & cc>1 & rr<dim(img)[1] & cc<dim(img)[2])"
"0","  {"
"0","    neighbs246 = c(t(img[(rr-1):(rr+1),][,(cc-1):(cc+1)]))[c(2,6,8)]"
"0","    neighbs468 = c(t(img[(rr-1):(rr+1),][,(cc-1):(cc+1)]))[c(4,6,8)]"
"0","    return(as.numeric(any(neighbs246 == 1) & any(neighbs468 == 1)))"
"0","  }"
"0","  else"
"0","    return(0)"
"0","}"
"0","#' neighbs246468"
"0","#'"
"0","#' Internal function for thinImage. Returns 1 if at least one of the points to the top, right and bottom AND at least one of top, right, left are non-zero. 0 otherwise."
"0","#' @param coords Point location."
"0","#' @param img Image object."
"0","#' @return Returns 1 or 0 for condition mentioned above."
"0","neighbs248268 = function(coords, img)"
"0","{"
"0","  rr = coords[1]"
"0","  cc = coords[2]"
"0","  if(rr>1 & cc>1 & rr<dim(img)[1] & cc<dim(img)[2])"
"0","  {"
"0","    neighbs248 = c(t(img[(rr-1):(rr+1),][,(cc-1):(cc+1)]))[c(2,4,6)]"
"0","    neighbs268 = c(t(img[(rr-1):(rr+1),][,(cc-1):(cc+1)]))[c(2,4,8)]"
"0","    return(as.numeric(any(neighbs248 == 1) & any(neighbs268 == 1)))"
"0","  }"
"0","  else"
"0","    return(0)"
"0","}"
"0","#' stepA"
"0","#'"
"0","#' Internal function for thinImage. First iteration of checks for thinning algorithm"
"0","#' @param img Image object."
"0","#' @param coords Locations of points to check."
"0","#' @return TRUE or FALSE for each point in coords, based on if they pass the checks."
"0","stepA = function(img, coords)"
"0","{"
"0","  imgA = matrix(apply(X = coords, MARGIN = 1, FUN = neighborChanges, img = img), byrow = F, nrow = 1)"
"0","  imgB = matrix(apply(X = coords, MARGIN = 1, FUN = numNeighbors, img = img), byrow = F, nrow = 1)"
"0","  img246468 = matrix(apply(X = coords, MARGIN = 1, FUN =  neighbs246468, img = img), byrow = F, nrow = 1)"
"0","  imgFlag = as.numeric(imgB >= 2 & imgB <= 6 & imgA == 1 & img246468 == 1)"
"0","  return(imgFlag)"
"0","}"
"0","#' stepA"
"0","#'"
"0","#' Internal function for thinImage. Second iteration of checks for thinning algorithm"
"0","#' @param img Image object."
"0","#' @param coords Locations of points to check."
"0","#' @return TRUE or FALSE for each point in coords, based on if they pass the checks."
"0","stepB = function(img, coords)"
"0","{"
"0","  imgA = matrix(apply(X = coords, MARGIN = 1, FUN = neighborChanges, img = img), byrow = F, nrow = 1)"
"0","  imgB = matrix(apply(X = coords, MARGIN = 1, FUN = numNeighbors, img = img), byrow = F, nrow = 1)"
"0","  img248268 = matrix(apply(X = coords, MARGIN = 1, FUN =  neighbs248268, img = img), byrow = F, nrow = 1)"
"0","  imgFlag = as.numeric(imgB >= 2 & imgB <= 6 & imgA == 1 & img248268 == 1)"
"0","  return(imgFlag)"
"0","}"
