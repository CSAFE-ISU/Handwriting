"0","naiveThinning = function(img, verbose = FALSE) "
"0","{"
"0","    flag = TRUE"
"0","    if (verbose) "
"0","    {"
"0","      iterCount = 1"
"0","      total.time.start <- Sys.time()"
"0","    }"
"0","    thinned = img"
"0","   # change = which(img == 0)"
"0","    while (flag == TRUE) {"
"0","        if (verbose != FALSE) "
"0","            start.time <- Sys.time()"
"0","        #index = change[thinned[change] == 0]"
"0","        index = 1:prod(dim(img))"
"0","        img.m = cbind(((index - 1)%%dim(img)[1]) + 1, ((index - 1)%/%dim(img)[1]) + 1)"
"0","        flagA = stepA(thinned, img.m) & thinned[index] == 0"
"0","        thinned[index] = ifelse(c(thinned[index] == 0) & flagA == 0, 0, 1)"
"0","        flagB = stepB(thinned, img.m) & thinned[index] == 0"
"0","        thinned[index] = ifelse(c(thinned[index] == 0) & flagB == 0, 0, 1)"
"0","        if (sum(flagA + flagB, na.rm = T) == 0) {"
"0","            flag = FALSE"
"0","        }"
"0","        else {"
"0","            #image(matrix(1-as.numeric(flagA|flagB), ncol = dim(img)[2]))"
"0","            #change = index[(flagA | flagB)]"
"0","            #change = unique(rep(change, each = 9) + rep(c(0, 1, -1, dim(img)[1] - 1, dim(img)[1] + 1, -dim(img)[1] + 1, -dim(img)[1] - 1, dim(img)[1], -dim(img)[1]), length(change)))"
"0","            #change = change[change >= 1 & change <= prod(dim(img))]"
"0","        }"
"0","        if (verbose == TRUE) {"
"0","            cat(""\nIteration"", iterCount, ""done:"", sum(flagA | flagB), ""changes."")"
"0","           # cat(""\nLeft to check:"", ifelse(sum(flagA | flagB) != 0, length(change), 0))"
"0","            iterCount = iterCount + 1"
"0","        }"
"0","        flagA[] = 0"
"0","        flagB[] = 0"
"0","        if (verbose == TRUE) {"
"0","            end.time <- Sys.time()"
"0","            cat(""\nIteration Time:"", end.time - start.time, ""\n"")"
"0","        }"
"0","    }"
"0","    if(verbose)"
"0","    {"
"0","      total.time.end <- Sys.time()"
"0","      cat(""\n------------------------\nTotal Run Time:"", difftime(total.time.end, total.time.start, units = ""secs""), ""\n------------------------\n"")"
"0","    }"
"0","    return(thinned)"
"0","}"
