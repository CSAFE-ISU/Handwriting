Writing a log to be transparent / house updates on progress
Aug - Sept 4:

Nic introduced me to the project and took me through a line by line walkthrough

I created the beginnings of a UML diagram to show my understanding of the process
A synopsis of the thinning process is as follows:
	png parse, crop
	preprocess
	thin
	plot_thinned

My introductory task was preprocessing a binary image before thinning, to provide Amy with less anomalies.

https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=6313034&tag=1
I thought I would use a library called 'numba' to speed up operations.
Naievly, I went against using numpy libraries to remove a layer of complexity to expidite the development process.
Fortunately, I found an alternative route to improve performance by a different interpreter, pypy.

PROS:
	Significantly faster program
	Reads easy
	Pure python
CONS:
	Pure python
	Additional dependency (always bad)

Step 5 is fully implemented, and I figure with the advent of a short work week I should flesh out steps 7-10 as I recall Nic showing
me functionality for 6, and I figure just writing a seperate script for his already created algorithm for connectivity would prevent a lot of wheel reinventing.

Okay, now I'd like to bring my working script to show some of its changes to the binary image.
I believe the process will go as so..
(assume this is all in R)
source("handwriter")
source("reticulate") <- let R use python
source_python("preprocess"){
	instead of one monolithic function, i'll split them up as elements
	must be removed right after step 5, then removed after 6, then 7 onward is ran.

	consequently the R script must now likely run as so:
		run steps 1-5, return points to fill/clean, change them in R
		run step 6 with nic's existing function, return points to fill/clean
		run steps 7 onward after both, returning points to fill/clean 
	as opposed to a simple "preprocess" as i intended.
	BUT if I am able to mutate the matrix and return it in its entirety, we can avoid this.

	After reading further, steps 7-9 must be segregated
}

18 9 18

I'm going to work on converting what I have to numpy, as I'm not the biggest fan of the current expensive iteration operations on the Matrix. Perhaps I'll just return a list of coordinates, but I need some way to couple behavior.

Anyways, here's a checklist for today:

- Begin converting iteration operations to numpy, eventually move to Numba from PyPy
- Decide with Nic on a better unified format, as a big question remains.
	- I can get the points to mutate the program with no-problem, but how can I define which indecies are going to be filled vs cleaned? 

- Step 6 connectivity, or if my program is really fast I'll implement it myself.

-ughh I wasted a bunch of time trying to take numpy approachesm oh well I learned my naive approach is pretty decent already

20 9 18

Feeling really down but glad I have this project to distract me. 

Met with Nic tuesday, made quality progress in regards to ensuring we can plot elements. A lot of my issues were R tweaks of concepts I wasn't aware of e.g extracting information from lists consistently. I saved the history and made Utility functions to prevent EVER having to manually draw out all of that again.

Mutability is present in memory in my python script. I'm going to finalize the algorithm in Python (inclusive of mutability) and return the result as a binary matrix.

So now my goal is as follows:
- Implement the final step measuring connectivity
- Return binary Matrix after mutated
- Create something to plot the differences between the mutated layer and original binary matrix
- Figure out why the hell the algorithm is trying to clean whitespace


Made a bunch of progress today
py_capture_output(exp,type=c("stdout","stderr")) <- extremely useful for debugging information
Huge performance boosts by basal memory checks before expensive iteration


4 10 18

I'm noticing absolutely suspect behavior from thinning a preprocessed image. The behavior gets a bit crazier when Nic's cleaning function is disabled as well. This leads to annoying happenings such as the thinned image contradicting a point marked for removal. 

Processing and performing thinning on the processing causes many individual holes to appear in areas they absolutely do not seem appropriate in. Take a look in preprocessing_examples/october for some examples. 

9 10 18
So I spent the better part of the morning struggling with Electron on my device. Turns out its a hardware issue and by specifiying --disable-gpu when running any electron app, the issue disappears!!!!!!

I intend on using electron to build a wrapper for the current handwriting application. I'd like to see Flash ID to get a better sense of some of the features I should be focused on implementing..
